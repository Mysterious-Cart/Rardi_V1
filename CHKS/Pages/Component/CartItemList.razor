@attribute [Authorize]
@using CHKS.Models.mydb;
@using CHKS.Models;
@namespace CHKS.Pages

<RadzenStack Orientation="Orientation.Vertical" Gap="10px" Style="overflow-x: hidden; overflow-y:scroll; height:92%">
@if(CartItem is not null && CartItem.Count() > 0){
    @foreach (var Item in CartItem)
    {
        <RadzenRow style="border-radius:15px; background-color:whitesmoke; padding:10px; max-height:120px">
            <RadzenColumn Size="2" Style="max-height: 100%; align-items:center; display:flexbox">
                    <RadzenButton Click="@(() => ChangeItemQty(Item))" Icon="add" Size="ButtonSize.Small" style="background-color:transparent;" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"/>
                    <p Style="border-radius: 30px; width:35px; height:40px; background-color:white; text-align:center; padding-top:10px"> @(((int)Item.Qty).ToString())</p>
                    <RadzenButton Click="@(() => ChangeItemQty(Item, -1))" Icon="remove" Size="ButtonSize.Small"  Style="background-color:transparent; border-width:0px;" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Light" />
            </RadzenColumn>
            <RadzenColumn Size="8">
                <RadzenStack style="height:100%; width:100%" Gap="2px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center" >
                    <RadzenText Text="@Item.Inventory.Name" Style="font-size:.9zvw; max-height:2lh; height:auto; width:100%; text-overflow:ellipsis; overflow:hidden; line-height:1.5rem"/>
                    <RadzenText Text=@((Item.PriceOverwrite??Item.Inventory.Export).ToString($"${0:N2}")) Style="overflow:hidden; line-height:.8rem" TextStyle="TextStyle.Caption"/>
                    <RadzenText Text="@Item.Note" Style="font-size:.8vw; max-height:1lh; height:auto; width:100%; text-overflow:ellipsis; overflow:hidden; line-height:1rem; color:gray"/>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenStack style="height:100%;" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                    <RadzenButton Icon="delete" Click="@(() => RemoveCartItem(Item))"  ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" style=" border-radius:13px;padding:1.5px "/>
                    <RadzenButton Icon="edit" Click="@(() => EditProduct(Item))" IconColor="Blue" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info" Variant="Variant.Outlined" style="border-radius:13px; padding:1.5px;" />
                </RadzenStack>
            </RadzenColumn>
            
        </RadzenRow>
    }
}
</RadzenStack>

@code {
    [Parameter]
    public IEnumerable<Connector> CartItem {get; set;}

    [Parameter]
    public EventCallback OnItemRemove {get; set;}

    [Inject]
    public DialogService DialogService {get; set;}

    [Inject]
    public mydbService mydbService {get; set;}

    [Inject]
    public CartControlService CartControl {get; set;}

    private async Task ChangeItemQty(Connector Item , int Qty = 1){
        await CartControl.AddItemToCart(Item.CartId,Item.Inventory, Qty);
        await OnItemRemove.InvokeAsync();
    }

    private async Task RemoveCartItem(Connector Item){
        await CartControl.RemoveCartItem(Item);
        await OnItemRemove.InvokeAsync();
    }

    protected async Task EditProduct(Models.mydb.Connector Product){
        var UpdatedItems = await DialogService.OpenAsync<SingleInputPopUp>(
                Product.Inventory.Name, 
                new Dictionary<string, object>{
                    {"Info",new string[]{"EditItem",
                        Product.PriceOverwrite?.ToString()??Product.Inventory.Export.ToString(), 
                        Product.Qty.ToString(), 
                        Product.Note,
                        Product.Inventory.Stock.ToString()}}}, 
                new DialogOptions{Width="500px"});

        if(UpdatedItems != null){
            Product.Qty = decimal.Parse(UpdatedItems[0]);
            Product.PriceOverwrite = decimal.Parse(UpdatedItems[1]);
            Product.Note = UpdatedItems[2];
            try{
                await mydbService.UpdateConnector(Product.Id, Product);
            }catch(Exception exc){

            }
        }
    }

 }
