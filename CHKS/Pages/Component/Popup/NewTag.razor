@page "/new-tag"

@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject mydbService Mydbservice;
@using CHKS.Models.mydb;
@using CHKS.Services;

@namespace Pages.Component.Popup

<MudDialog style="max-height: 400px;">
    <TitleContent>
        Dialog Title
    </TitleContent>
    <DialogContent>
        <RadzenRow Style="margin-top:10px; ">
            <RadzenButton Text="Confirm" ButtonStyle="ButtonStyle.Success" Click="@(() => AddTag())"/>
            <RadzenButton Text="Create" Click="@InsertRow" Style="margin-left:auto;"/>
        </RadzenRow>
        <RadzenRow Style="margin-top:10px">
            <RadzenDataGrid Style="height:100% " @ref="@TagsTable" AllowVirtualization="true" Data="TagsTableData" TItem="Tags"
            RowCreate="@CreateTag" RowUpdate="@GridRowUpdate" AllowPaging=false SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@ChoosenTags">
                <Columns>
                    <RadzenDataGridColumn TItem="Tags" Property="Tag" Title="Tag">
                        <EditTemplate Context="tag">
                            <RadzenTextBox @bind-Value="@tag.Tag"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Tags" Property="Color" Title="Color">
                        <EditTemplate Context="tag">
                            <RadzenTextBox @bind-Value="@tag.Color"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="100px" >
                        <EditTemplate Context="tag">
                            <RadzenButton Click="@(args => SaveButtonClick(args,tag))" ButtonStyle="ButtonStyle.Success" Icon="check"/>
                            <RadzenButton Click="@(args => TagsTable.CancelEditRow(tag))"ButtonStyle="ButtonStyle.Danger" Icon="cancel"/>
                        </EditTemplate>
                        <Template Context="tag">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" Disabled="true"/>
                            <RadzenButton Click="@(args => DeleteTag(tag))"ButtonStyle="ButtonStyle.Danger" Icon="delete"/>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenRow>

    </DialogContent>

</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    [Parameter]
    public Inventory product {get; set;}

    private RadzenDataGrid<Tags> TagsTable = null;
    private IEnumerable<Tags> TagsTableData = [];
    private IList<Tags> ChoosenTags = [];

    protected override async Task OnInitializedAsync()
    {
       var result = await Mydbservice.GetTags();
       TagsTableData = result;
       ChoosenTags = product?.Tags.ToList();
        
    }

    private async Task AddTag(){
        foreach(var i in product.Tags){
            if(!ChoosenTags.Any(v => v.Id.Equals(i.Id))){
                await Mydbservice.InventoryRemoveTag(product.Id, i);
            }
        }
        foreach(var i in ChoosenTags){
            if(!product.Tags.Any(v => v.Id.Equals(i.Id))){
                await Mydbservice.InventoryAddTag(product.Id, i);
            }
        }

        DialogService.Close();
    }

    private async void DeleteTag(Tags tag){
        await Mydbservice.DeleteTags(tag.Id);
        await TagsTable.Reload();
    }

    private async void InsertRow(){
        await TagsTable.InsertRow(new Tags());
    }


    private async void CreateTag(Tags args){
        var tag = new Tags() {
            Tag = args.Tag,
            Color = args.Color,
        };
        await Mydbservice.CreateTag(tag);
        await TagsTable.Reload();
    }

    private async void GridRowUpdate(Tags args)
    {
        await Mydbservice.UpdateTags(args);

    }

    private async void SaveButtonClick(MouseEventArgs args, Tags data)
    {
        await TagsTable.UpdateRow(data);
    }
}
